// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleProject.DataAccessLayer.Context;

#nullable disable

namespace VehicleProject.DataAccessLayer.Migrations
{
    [DbContext(typeof(VehicleProjectContext))]
    [Migration("20230511152244_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.Boat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeadlightOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SeatCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("UserId");

                    b.ToTable("Boats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandName = "BrandName 1",
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(1427),
                            IsDeleted = false,
                            IsHeadlightOn = false,
                            IsUpdated = false,
                            ModelName = "ModelName 1",
                            SeatCapacity = 0,
                            UserId = "b2f65c29-f3d5-4244-a648-d194869a3c9b"
                        },
                        new
                        {
                            Id = 2,
                            BrandName = "BrandName 2",
                            ColorId = 2,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(1442),
                            IsDeleted = false,
                            IsHeadlightOn = false,
                            IsUpdated = false,
                            ModelName = "ModelName 2",
                            SeatCapacity = 0,
                            UserId = "b2f65c29-f3d5-4244-a648-d194869a3c9b"
                        },
                        new
                        {
                            Id = 3,
                            BrandName = "BrandName 3",
                            ColorId = 3,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(1445),
                            IsDeleted = false,
                            IsHeadlightOn = false,
                            IsUpdated = false,
                            ModelName = "ModelName 3",
                            SeatCapacity = 0,
                            UserId = "b2f65c29-f3d5-4244-a648-d194869a3c9b"
                        });
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeadlightOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfWheels")
                        .HasColumnType("int");

                    b.Property<int>("SeatCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("UserId");

                    b.ToTable("Buses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandName = "BrandName 1",
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(2188),
                            IsDeleted = false,
                            IsHeadlightOn = false,
                            IsUpdated = false,
                            ModelName = "ModelName 1",
                            NumberOfWheels = 6,
                            SeatCapacity = 0,
                            UserId = "b2f65c29-f3d5-4244-a648-d194869a3c9b"
                        },
                        new
                        {
                            Id = 2,
                            BrandName = "BrandName 2",
                            ColorId = 2,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(2195),
                            IsDeleted = false,
                            IsHeadlightOn = false,
                            IsUpdated = false,
                            ModelName = "ModelName 2",
                            NumberOfWheels = 6,
                            SeatCapacity = 0,
                            UserId = "b2f65c29-f3d5-4244-a648-d194869a3c9b"
                        },
                        new
                        {
                            Id = 3,
                            BrandName = "BrandName 3",
                            ColorId = 3,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(2197),
                            IsDeleted = false,
                            IsHeadlightOn = false,
                            IsUpdated = false,
                            ModelName = "ModelName 3",
                            NumberOfWheels = 6,
                            SeatCapacity = 0,
                            UserId = "b2f65c29-f3d5-4244-a648-d194869a3c9b"
                        });
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeadlightOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfWheels")
                        .HasColumnType("int");

                    b.Property<int>("SeatCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandName = "BrandName 1",
                            ColorId = 1,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(2670),
                            IsDeleted = false,
                            IsHeadlightOn = false,
                            IsUpdated = false,
                            ModelName = "ModelName 1",
                            NumberOfWheels = 4,
                            SeatCapacity = 0,
                            UserId = "b2f65c29-f3d5-4244-a648-d194869a3c9b"
                        },
                        new
                        {
                            Id = 2,
                            BrandName = "BrandName 2",
                            ColorId = 2,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(2676),
                            IsDeleted = false,
                            IsHeadlightOn = false,
                            IsUpdated = false,
                            ModelName = "ModelName 2",
                            NumberOfWheels = 4,
                            SeatCapacity = 0,
                            UserId = "b2f65c29-f3d5-4244-a648-d194869a3c9b"
                        },
                        new
                        {
                            Id = 3,
                            BrandName = "BrandName 3",
                            ColorId = 3,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(2679),
                            IsDeleted = false,
                            IsHeadlightOn = false,
                            IsUpdated = false,
                            ModelName = "ModelName 3",
                            NumberOfWheels = 4,
                            SeatCapacity = 0,
                            UserId = "b2f65c29-f3d5-4244-a648-d194869a3c9b"
                        });
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(3126),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(3135),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(3137),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Gray"
                        });
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b2f65c29-f3d5-4244-a648-d194869a3c9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88f2459c-46c7-4a73-8cf9-0be7ed3fc13d",
                            CreatedDate = new DateTime(2023, 5, 11, 18, 22, 44, 386, DateTimeKind.Local).AddTicks(3662),
                            Email = "mfthdkr@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Fatih",
                            IsDeleted = false,
                            IsUpdated = false,
                            LastName = "Diker",
                            LockoutEnabled = false,
                            NormalizedEmail = "MFTHDKR@GMAIL.COM",
                            NormalizedUserName = "MFTHDKR",
                            PasswordHash = "AQAAAAIAAYagAAAAEPiv9gbc9X0DiofTY4RAxE7zt/i3u43JYovTXD08jdSMgrViZZEy9AAdh14cEt3zUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc2ae721-bbd8-4934-871c-f3709f73bbd6",
                            TwoFactorEnabled = false,
                            UserName = "mfthdkr"
                        });
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.UserRefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VehicleProject.CoreLayer.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VehicleProject.CoreLayer.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleProject.CoreLayer.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VehicleProject.CoreLayer.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.Boat", b =>
                {
                    b.HasOne("VehicleProject.CoreLayer.Entities.Concrete.Color", "Color")
                        .WithMany("Boats")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleProject.CoreLayer.Entities.Concrete.User", "User")
                        .WithMany("Boats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.Bus", b =>
                {
                    b.HasOne("VehicleProject.CoreLayer.Entities.Concrete.Color", "Color")
                        .WithMany("Buses")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleProject.CoreLayer.Entities.Concrete.User", "User")
                        .WithMany("Buses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.Car", b =>
                {
                    b.HasOne("VehicleProject.CoreLayer.Entities.Concrete.Color", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleProject.CoreLayer.Entities.Concrete.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.Color", b =>
                {
                    b.Navigation("Boats");

                    b.Navigation("Buses");

                    b.Navigation("Cars");
                });

            modelBuilder.Entity("VehicleProject.CoreLayer.Entities.Concrete.User", b =>
                {
                    b.Navigation("Boats");

                    b.Navigation("Buses");

                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
